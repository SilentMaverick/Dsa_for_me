class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    //merging two vector
    nums1.insert(nums1.end(), nums2.begin(), nums2.end());
    //median is the middle most of the total places in sorted manner
    sort(nums1.begin() , nums1.end());
    int size = nums1.size();
    //checking if the size is odd or even an returning accordingly
    if (size % 2 == 1) {
        // Odd number of elements
        return nums1[size / 2];
    } else {
        // Even number of elements
        return (nums1[size / 2 - 1] + nums1[size / 2]) / 2.0;
        }
    }
};
//time complexity is 3ms (its  a bit too much) i.e. O(M+N)

//so what else we can do is :
double findMedianSortedArrays(vector<int>& a, vector<int>& b) {
        int n1=a.size();
        int n2=b.size();
        int i=0,j=0;
        int n=n1+n2;
        int ind2=n/2;
        int ind1=ind2-1;
        int cnt=0;
        int ind1el=-1,ind2el=-1;
        while(i<n1 && j<n2){
            if(a[i]<b[j]){
                if(cnt==ind1){
                    ind1el=a[i];
                }
                if(cnt==ind2){
                    ind2el=a[i];
                }
                cnt++;
                i++;
            }else{
                if(cnt==ind1){
                    ind1el=b[j];
                }
                if(cnt==ind2){
                    ind2el=b[j];
                }
                cnt++;
                j++;
            }
        }
        while(i<n1){
            if(cnt==ind1){
                ind1el=a[i];
            }
            if(cnt==ind2){
                ind2el=a[i];
            }
            cnt++;
            i++;
        }
        while(j<n2){
            if(cnt==ind1){
                ind1el=b[j];
            }
            if(cnt==ind2){
                ind2el=b[j];
            }
            cnt++;
            j++;
        }
        if(n%2==1){
            return ind2el;
        }
        return (double)((double)(ind1el+ind2el))/2.0;
    }
};
